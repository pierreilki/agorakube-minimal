---
- name: Create temp directory "{{ data_path }}/certificates"
  file:
    path: "{{ item  }}"
    state: directory
  with_items:
    - "{{ data_path }}/certificates"
    - "{{ data_path }}/certificates/ca"
    - "{{ data_path }}/certificates/intermediate"
    - "{{ data_path }}/certificates/intermediate/kubernetes-ca"
    - "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed"
    - "{{ data_path }}/certificates/intermediate/etcd-ca"
    - "{{ data_path }}/certificates/intermediate/etcd-ca/signed"
    - "{{ data_path }}/certificates/intermediate/kubernetes-front-proxy-ca"
    - "{{ data_path }}/certificates/intermediate/kubernetes-front-proxy-ca/signed"
    - "{{ data_path }}/certificates/intermediate/sa"
    - "{{ data_path }}/certificates/intermediate/sa/signed"
    - "{{ data_path }}/certificates/end/kube-etcd"
    - "{{ data_path }}/certificates/end/kube-etcd-peer"
    - "{{ data_path }}/certificates/end/kube-etcd-healthcheck-client"
    - "{{ data_path }}/certificates/end/kube-apiserver-etcd-client"
    - "{{ data_path }}/certificates/end/kube-apiserver"
    - "{{ data_path }}/certificates/end/kube-apiserver-kubelet-client"
    - "{{ data_path }}/certificates/end/front-proxy-client"
    - "{{ data_path }}/certificates/configs"
    - "{{ data_path }}/certificates/configs/admin"
    - "{{ data_path }}/certificates/configs/kubelet"
    - "{{ data_path }}/certificates/configs/controller-manager"
    - "{{ data_path }}/certificates/configs/scheduler"
    - "{{ data_path }}/certificates/configs/proxier"
    - "{{ data_path }}/authentication_keys"

- name: Create ca_root_csr file
  template:
    src: root_csr.json.j2
    dest: "{{ data_path }}/certificates/ca/ca-csr.json"

- name: Generate ca_root certificates
  shell: |
    set -o pipefail
    cfssl gencert -initca {{ data_path }}/certificates/ca/ca-csr.json | cfssljson -bare {{ data_path }}/certificates/ca/ca
  args:
    creates: "{{ data_path }}/certificates/ca/ca-key.pem"
    executable: /bin/bash

- name: Copy intermediate CSRs
  template:
    src: intermediate-csr.json.j2
    dest: "{{ data_path }}/certificates/intermediate/{{ item }}/{{ item }}-csr.json"
  with_items:
    - kubernetes-front-proxy-ca
    - kubernetes-ca
    - etcd-ca
    - sa

- name: Generate intermediate certificates
  shell: |
    set -o pipefail
    cfssl gencert -initca {{ data_path }}/certificates/intermediate/{{ item }}/{{ item }}-csr.json \
    | cfssljson -bare {{ data_path }}/certificates/intermediate/{{ item }}/{{ item }}
  args:
    creates: "{{ data_path }}/certificates/intermediate/{{ item }}/{{ item }}-key.pem"
  with_items:
    - kubernetes-front-proxy-ca
    - kubernetes-ca
    - etcd-ca
    - sa

#- name: Save autentication token key
#  copy:
#    src: "{{ data_path }}/certificates/intermediate/kubernetes-ca/kubernetes-ca-key.pem"
#    dest: "{{ data_path }}/authentication_keys/kubernetes-ca-key-{{ ansible_date_time.iso8601_basic_short }}.pem"
#  when: rotate_certs_pki

- name: Generation of the intermediate CA configuration
  template:
    src: root_to_intermediate.json.j2
    dest: "{{ data_path }}/certificates/ca/root_to_intermediate.json"

- name: Sign of intermediate certificates on CA_ROOT
  shell: |
    set -o pipefail
    cfssl sign -ca {{ data_path }}/certificates/ca/ca.pem  -ca-key {{ data_path }}/certificates/ca/ca-key.pem  \
    -config {{ data_path }}/certificates/ca/root_to_intermediate.json {{ data_path }}/certificates/intermediate/{{ item }}/{{ item }}.csr \
    | cfssljson -bare {{ data_path }}/certificates/intermediate/{{ item }}/signed/{{ item }}
  args:
    creates: "{{ data_path }}/certificates/intermediate/{{ item }}/signed/{{ item }}.pem"
  with_items:
    - kubernetes-front-proxy-ca
    - kubernetes-ca
    - etcd-ca
    - sa

- name: Generation of final CA configuration 1
  template:
    src: end_1.json
    dest: "{{ data_path }}/certificates/end/{{ item.name }}/{{ item.name }}-csr.json"
  with_items:
    - { name: 'kube-etcd-healthcheck-client', o: ''}
    - { name: 'kube-apiserver-etcd-client',  o: 'system:masters' }
    - { name: 'front-proxy-client', o: ''}

- name: Generation of final CSR configuration for kubelet
  template:
    src: end_kubelet_client_csr.json
    dest: "{{ data_path }}/certificates/end/kube-apiserver-kubelet-client/kube-apiserver-kubelet-client-csr.json"

- name: Generation of server folder etcd in "{{ data_path }}/certificates/end/kube-etcd-peer/[serveur_name]"
  file:
    path: "{{ data_path }}/certificates/end/kube-etcd-peer/{{ item }}"
    state: directory
  with_items: "{{ groups['etcd'] }}"

- name: Generation of final CA configuration kube-etcd-peer
  template:
    src: kube-etcd-peer-csr.json.j2
    dest : "{{ data_path }}/certificates/end/kube-etcd-peer/{{ item }}/kube-etcd-peer-csr.json"
  with_items: "{{ groups['etcd'] }}"

- name: Generation of final CA configuration kube-etcd
  template:
    src: kube-etcd-csr.json.j2
    dest : "{{ data_path }}/certificates/end/kube-etcd/kube-etcd-csr.json"

- name: Generation of etcd server folder in "{{ data_path }}/certificates/end/kube-apiserver/[serveur_name]"
  file:
    path: "{{ data_path }}/certificates/end/kube-apiserver/{{ item }}"
    state: directory
  with_items: "{{ groups['masters'] }}"

- name: Generation of final CA configuration of kube-apiserver
  template:
    src: kube-apiserver-csr.json.j2
    dest: "{{ data_path }}/certificates/end/kube-apiserver/{{ item }}/kube-apiserver-csr.json"
  with_items: "{{ groups['masters'] }}"

- name: Config "{{ data_path }}/certificates/intermediate/intermediate_to_end.json"
  template:
    src: intermediate_to_end.json.j2
    dest: "{{ data_path }}/certificates/intermediate/intermediate_to_end.json"

- name: Generate certificates [kube-etcd-healthcheck-client] [kube-apiserver-etcd-client]
  shell: |
    set -o pipefail
    cfssl gencert -ca {{ data_path }}/certificates/intermediate/etcd-ca/signed/etcd-ca.pem \
    -ca-key {{ data_path }}/certificates/intermediate/etcd-ca/etcd-ca-key.pem  \
    -config {{ data_path }}/certificates/intermediate/intermediate_to_end.json \
    -profile client  {{ data_path }}/certificates/end/{{ item }}/{{ item }}-csr.json \
    | cfssljson -bare {{ data_path }}/certificates/end/{{ item }}/{{ item }}
  args:
    creates: "{{ data_path }}/certificates/end/{{ item }}/{{ item }}-key.pem"
  with_items:
    - kube-etcd-healthcheck-client
    - kube-apiserver-etcd-client

- name: Generate certificate [kube-etcd-peer]
  shell: |
    set -o pipefail
    cfssl gencert -ca {{ data_path }}/certificates/intermediate/etcd-ca/signed/etcd-ca.pem \
    -ca-key {{ data_path }}/certificates/intermediate/etcd-ca/etcd-ca-key.pem \
    -config {{ data_path }}/certificates/intermediate/intermediate_to_end.json \
    -profile client -profile server {{ data_path }}/certificates/end/kube-etcd-peer/{{ item }}/kube-etcd-peer-csr.json \
    | cfssljson -bare {{ data_path }}/certificates/end/kube-etcd-peer/{{ item }}/kube-etcd-peer
  args:
    creates: "{{ data_path }}/certificates/end/kube-etcd-peer/{{ item }}/kube-etcd-peer-key.pem"
  with_items: "{{ groups['etcd'] }}"

- name: Generate certificate [kube-etcd]
  shell: |
    set -o pipefail
    cfssl gencert -ca {{ data_path }}/certificates/intermediate/etcd-ca/signed/etcd-ca.pem \
    -ca-key {{ data_path }}/certificates/intermediate/etcd-ca/etcd-ca-key.pem \
    -config {{ data_path }}/certificates/intermediate/intermediate_to_end.json \
    -profile client -profile server {{ data_path }}/certificates/end/kube-etcd/kube-etcd-csr.json \
    | cfssljson -bare {{ data_path }}/certificates/end/kube-etcd/kube-etcd
  args:
    creates: "{{ data_path }}/certificates/end/kube-etcd/kube-etcd-key.pem"

- name : Generate certificate [kube-apiserver]
  shell: |
    set -o pipefail
    cfssl gencert -ca {{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem \
    -ca-key {{ data_path }}/certificates/intermediate/kubernetes-ca/kubernetes-ca-key.pem \
    -config {{ data_path }}/certificates/intermediate/intermediate_to_end.json \
    -profile server {{ data_path }}/certificates/end/kube-apiserver/{{ item }}/kube-apiserver-csr.json \
    | cfssljson -bare {{ data_path }}/certificates/end/kube-apiserver/{{ item }}/kube-apiserver
  args:
    creates: "{{ data_path }}/certificates/end/kube-apiserver/{{ item }}/kube-apiserver-key.pem"
  with_items: "{{ groups['masters'] }}"

- name: Generate certificate [kube-apiserver-kubelet-client]
  shell: |
    set -o pipefail
    cfssl gencert -ca {{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem \
    -ca-key {{ data_path }}/certificates/intermediate/kubernetes-ca/kubernetes-ca-key.pem \
    -config {{ data_path }}/certificates/intermediate/intermediate_to_end.json \
    -profile client {{ data_path }}/certificates/end/kube-apiserver-kubelet-client/kube-apiserver-kubelet-client-csr.json \
    | cfssljson -bare {{ data_path }}/certificates/end/kube-apiserver-kubelet-client/kube-apiserver-kubelet-client
  args:
    creates: "{{ data_path }}/certificates/end/kube-apiserver-kubelet-client/kube-apiserver-kubelet-client-key.pem"

- name: Generate certificate [front-proxy-client]
  shell: |
    set -o pipefail
    cfssl gencert -ca {{ data_path }}/certificates/intermediate/kubernetes-front-proxy-ca/signed/kubernetes-front-proxy-ca.pem \
    -ca-key {{ data_path }}/certificates/intermediate/kubernetes-front-proxy-ca/kubernetes-front-proxy-ca-key.pem \
    -config {{ data_path }}/certificates/intermediate/intermediate_to_end.json \
    -profile client {{ data_path }}/certificates/end/front-proxy-client/front-proxy-client-csr.json \
    | cfssljson -bare {{ data_path }}/certificates/end/front-proxy-client/front-proxy-client
  args:
    creates: "{{ data_path }}/certificates/end/front-proxy-client/front-proxy-client-key.pem"

- name: Create configuration files for config [admin] [controller-manager] [scheduler]
  template:
    src: certificates_for_users_classics.json.j2
    dest: "{{ data_path }}/certificates/configs/{{ item.name }}/{{ item.name }}-csr.json"
  with_items:
    - { name: 'admin', o: 'system:masters', cname: 'kubernetes-admin' }
    - { name: 'controller-manager', o: '', cname: 'system:kube-controller-manager' }
    - { name: 'scheduler', o: '', cname: 'system:kube-scheduler' }
    - { name: 'proxier', o: '', cname: 'system:kube-proxy' }

- name: Generation of certificates for [admin] [controller-manager] [scheduler]
  shell: |
    set -o pipefail
    cfssl gencert -ca {{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem \
    -ca-key {{ data_path }}/certificates/intermediate/kubernetes-ca/kubernetes-ca-key.pem \
    {{ data_path }}/certificates/configs/{{ item }}/{{ item }}-csr.json \
    | cfssljson -bare {{ data_path }}/certificates/configs/{{ item }}/{{ item }}
  args:
    creates: "{{ data_path }}/certificates/configs/{{ item }}/{{ item }}-key.pem"
  with_items:
    - admin
    - controller-manager
    - scheduler
    - proxier

- name: Generate arbo kubelet for masters
  file:
    path: "{{ data_path }}/certificates/configs/kubelet/{{ item }}"
    state: directory
  with_items: "{{ groups['masters'] }}"

- name: Generate arbo kubelet for workers
  file:
    path: "{{ data_path }}/certificates/configs/kubelet/{{ item }}"
    state: directory
  with_items: "{{ groups['workers'] }}"

- name : Generate configuration account kubelet masters
  template:
    src: config-kubelet-account.json.j2
    dest:  "{{ data_path }}/certificates/configs/kubelet/{{ item }}/config-kubelet-account.json"
  with_items: "{{ groups['masters'] }}"

- name: Certificates generation for [kubelet] masters
  shell: |
    set -o pipefail
    cfssl gencert -ca {{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem \
    -ca-key {{ data_path }}/certificates/intermediate/kubernetes-ca/kubernetes-ca-key.pem \
    {{ data_path }}/certificates/configs/kubelet/{{ item }}/config-kubelet-account.json \
    | cfssljson -bare {{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet-key.pem"
  with_items: "{{ groups['masters'] }}"

- name : Generate configuration account kubelet workers
  template:
    src: config-kubelet-account.json.j2
    dest:  "{{ data_path }}/certificates/configs/kubelet/{{ item }}/config-kubelet-account.json"
  with_items: "{{ groups['workers'] }}"

- name: Certificates generation for [kubelet] workers
  shell: |
    set -o pipefail
    cfssl gencert -ca {{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem \
    -ca-key {{ data_path }}/certificates/intermediate/kubernetes-ca/kubernetes-ca-key.pem \
    {{ data_path }}/certificates/configs/kubelet/{{ item }}/config-kubelet-account.json \
    | cfssljson -bare {{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet-key.pem"
  with_items: "{{ groups['workers'] }}"

- name: File generation of kubeconfig configuration for [proxier] 1/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/proxier/proxier.conf" \
    kubectl config set-cluster default-cluster --server=https://{{ advertise_ip_masters }}:6443 \
    --certificate-authority "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" \
    --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/proxier/proxier.flag"

- name: File generation of kubeconfig configuration for [proxier] 2/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/proxier/proxier.conf" \
    kubectl config set-credentials system:kube-proxy --client-key "{{ data_path }}/certificates/configs/proxier/proxier-key.pem" \
    --client-certificate "{{ data_path }}/certificates/configs/proxier/proxier.pem" \
    --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/proxier/proxier.flag"

- name: File generation of kubeconfig configuration for [proxier] 3/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/proxier/proxier.conf" \
    kubectl config set-context default-system --cluster default-cluster --user system:kube-proxy
  args:
    creates: "{{ data_path }}/certificates/configs/proxier/proxier.flag"

- name: File generation of kubeconfig configuration for [proxier] 4/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/proxier/proxier.conf" kubectl config use-context default-system
  args:
    creates: "{{ data_path }}/certificates/configs/proxier/proxier.flag"

- name: Touch a flag file for Proxier kubeconfig generation statement
  file:
    path: "{{ data_path }}/certificates/configs/proxier/proxier.flag"
    state: touch
    modification_time: preserve
    access_time: preserve

- name: File generation of kubeconfig configuration for [admin] 1/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/admin/admin.conf" \
    kubectl config set-cluster default-cluster --server=https://{{ advertise_ip_masters }}:6443 \
    --certificate-authority "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" \
    --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/admin/admin.flag"

- name: File generation of kubeconfig configuration for [admin] 2/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/admin/admin.conf" \
    kubectl config set-credentials default-admin --client-key "{{ data_path }}/certificates/configs/admin/admin-key.pem" \
    --client-certificate "{{ data_path }}/certificates/configs/admin/admin.pem" \
    --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/admin/admin.flag"

- name: File generation of kubeconfig configuration for [admin] 3/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/admin/admin.conf" \
    kubectl config set-context default-system --cluster default-cluster --user default-admin
  args:
    creates: "{{ data_path }}/certificates/configs/admin/admin.flag"

- name: File generation of kubeconfig configuration for [admin] 4/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/admin/admin.conf" kubectl config use-context default-system
  args:
    creates: "{{ data_path }}/certificates/configs/admin/admin.flag"

- name: Touch a flag file for Admin kubeconfig generation statement
  file:
    path: "{{ data_path }}/certificates/configs/admin/admin.flag"
    state: touch
    modification_time: preserve
    access_time: preserve

- name: File generation of kubeconfig configuration for [controller-manager] 1/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/controller-manager/controller-manager.conf" \
    kubectl config set-cluster default-cluster --server=https://{{ advertise_ip_masters }}:6443 \
    --certificate-authority "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" \
    --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/controller-manager/controller-manager.flag"

- name: File generation of kubeconfig configuration for [controller-manager] 2/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/controller-manager/controller-manager.conf" \
    kubectl config set-credentials default-controller-manager \
    --client-key "{{ data_path }}/certificates/configs/controller-manager/controller-manager-key.pem" \
    --client-certificate "{{ data_path }}/certificates/configs/controller-manager/controller-manager.pem" \
    --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/controller-manager/controller-manager.flag"

- name: File generation of kubeconfig configuration for [controller-manager] 3/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/controller-manager/controller-manager.conf" \
    kubectl config set-context default-system --cluster default-cluster --user default-controller-manager
  args:
    creates: "{{ data_path }}/certificates/configs/controller-manager/controller-manager.flag"

- name: File generation of kubeconfig configuration for [controller-manager] 4/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/controller-manager/controller-manager.conf" \
    kubectl config use-context default-system
  args:
    creates: "{{ data_path }}/certificates/configs/controller-manager/controller-manager.flag"

- name: Touch a flag file for controller-manager kubeconfig generation statement
  file:
    path: "{{ data_path }}/certificates/configs/controller-manager/controller-manager.flag"
    state: touch
    modification_time: preserve
    access_time: preserve

- name: File generation of kubeconfig configuration for [scheduler] 1/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/scheduler/scheduler.conf" \
    kubectl config set-cluster default-cluster --server=https://{{ advertise_ip_masters }}:6443 \
    --certificate-authority "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" \
    --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/scheduler/scheduler.flag"

- name: File generation of kubeconfig configuration for [scheduler] 2/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/scheduler/scheduler.conf" \
    kubectl config set-credentials default-manager --client-key "{{ data_path }}/certificates/configs/scheduler/scheduler-key.pem" \
    --client-certificate "{{ data_path }}/certificates/configs/scheduler/scheduler.pem" \
    --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/scheduler/scheduler.flag"

- name: File generation of kubeconfig configuration for [scheduler] 3/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/scheduler/scheduler.conf" \
    kubectl config set-context default-system --cluster default-cluster --user default-manager
  args:
    creates: "{{ data_path }}/certificates/configs/scheduler/scheduler.flag"

- name: File generation of kubeconfig configuration for [scheduler] 4/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/scheduler/scheduler.conf" kubectl config use-context default-system
  args:
    creates: "{{ data_path }}/certificates/configs/scheduler/scheduler.flag"

- name: Touch a flag file for scheduler kubeconfig generation statement
  file:
    path: "{{ data_path }}/certificates/configs/scheduler/scheduler.flag"
    state: touch
    modification_time: preserve
    access_time: preserve

- name: Configuration file generation of kubeconfig for [kubelet] masters 1/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.config" \
    kubectl config set-cluster default-cluster --server=https://{{ advertise_ip_masters }}:6443 \
    --certificate-authority "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" \
    --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.flag"
  with_items: "{{ groups['masters'] }}"

- name: Configuration file generation of kubeconfig for [kubelet] masters 2/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.config" \
    kubectl config set-credentials default-auth --client-key "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet-key.pem" \
    --client-certificate "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.pem" \
    --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.flag"
  with_items: "{{ groups['masters'] }}"

- name: Configuration file generation of kubeconfig for [kubelet] masters 3/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.config" \
    kubectl config set-context default-system --cluster default-cluster --user default-auth
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.flag"
  with_items: "{{ groups['masters'] }}"

- name: Configuration file generation of kubeconfig for [kubelet] masters 4/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.config" \
    kubectl config use-context default-system
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.flag"
  with_items: "{{ groups['masters'] }}"

- name: Create flags [Modifier plus tard !!]
  copy:
    dest: "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.flag"
    content: ''
  with_items: "{{ groups['masters'] }}"


- name: Configuration file generation of kubeconfig for [kubelet] workers 1/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.config" \
    kubectl config set-cluster default-cluster --server=https://{{ advertise_ip_masters }}:6443 \
    --certificate-authority "{{ data_path }}/certificates/intermediate/kubernetes-ca/signed/kubernetes-ca.pem" \
    --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.flag"
  with_items: "{{ groups['workers'] }}"

- name: Configuration file generation of kubeconfig for [kubelet] workers 2/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.config" \
    kubectl config set-credentials default-auth --client-key "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet-key.pem" \
    --client-certificate "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.pem" \
    --embed-certs
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.flag"
  with_items: "{{ groups['workers'] }}"

- name: Configuration file generation of kubeconfig for [kubelet] workers 3/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.config" \
    kubectl config set-context default-system --cluster default-cluster --user default-auth
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.flag"
  with_items: "{{ groups['workers'] }}"

- name: Configuration file generation of kubeconfig for [kubelet] workers 4/4
  shell: |
    KUBECONFIG="{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.config" \
    kubectl config use-context default-system
  args:
    creates: "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.flag"
  with_items: "{{ groups['workers'] }}"

- name: Create flags [Modifier plus tard !!] workers
  copy:
    dest: "{{ data_path }}/certificates/configs/kubelet/{{ item }}/kubelet.flag"
    content: ''
  with_items: "{{ groups['workers'] }}"
